#!/usr/bin/env ruby
require 'ffi-gtk3'

Gtk.init

module Phew
  # A script.
  class Script
    def initialize name
      symbol = name.to_sym
      @symbol = symbol
      @lang = Pango.script_get_sample_language symbol
    end

    def sample_string
      if @lang.nil?
        "No sample available"
      else
        @lang.get_sample_string
      end
    end
  end

  # Drop-down list of available scripts.
  class ScriptList < Gtk::ComboBoxText
    # FIXME: Should be able to fill inside #initialize
    def fill
      Pango::Script.symbols.
        map {|sym| sym.to_s}.
        each {|str| self.append str, str}
    end

  end

  # Main Phew window
  class Window < Gtk::Window
    # Set up generic signal handlers for the window:
    # - Closing the window ends the application
    # - Pressing Ctrl-Q closes the window.
    def connect_signals
      signal_connect('destroy') { on_destroy_event }
      signal_connect('key-press-event') { |_,evt,_| on_key_press_event evt }
    end

    def on_destroy_event
      Gtk.main_quit
      false
    end

    def on_key_press_event evt
      if evt.state == :control_mask and evt.keyval == "q".ord
        self.destroy
      end
      false
    end
  end

  # Main Phew application.
  class Application
    def combo
      @combo ||= ScriptList.new.tap {|lst| lst.fill}
    end

    def textview
      @textview ||= Gtk::TextView.new
    end

    def build_vbox
      vbox = Gtk::VBox.new false, 0

      vbox.pack_start combo, false, false, 0
      vbox.pack_start textview, false, false, 0
      vbox.pack_start scriptlist, false, false, 0
      vbox
    end

    def vbox
      @vbox ||= build_vbox
    end

    def scriptlist
      @scriptlist ||= Gtk::TreeView.new_with_model(scriptmodel).tap do |view|
        renderer = Gtk::CellRendererText.new
        col = Gtk::TreeViewColumn.new
        col.set_title "Font Name"
        col.pack_start renderer, true
        col.add_attribute renderer, "text", 0
        view.append_column col
      end
    end

    def scriptmodel
      @scriptmodel ||= Gtk::ListStore.new [GObject::TYPE_STRING]
    end

    def build_win
      win = Window.new :toplevel
      win.add vbox
      win
    end

    def win
      @win ||= build_win
    end

    # Set up all signal handlers
    def connect_signals
      win.connect_signals
      combo.signal_connect('changed') { on_combo_changed_signal }
    end

    def on_combo_changed_signal
      script = Script.new combo.active_text.to_sym
      textview.buffer.text = script.sample_string
    end

    def initialize
      connect_signals

      row = scriptmodel.append
      scriptmodel.set_value row, 0, "Boo"

      win.show_all
    end

    def run
      Gtk.main
    end
  end
end

Phew::Application.new.run
